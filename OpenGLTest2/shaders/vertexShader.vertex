#version 330 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec4 color; 
layout (location = 2) in float textureID; 
layout (location = 3) in vec2 uv;
layout (location = 4) in vec3 surfaceNormal;

out DATA {
	vec4 color; 
	float textureID;
	vec2 uv;
	vec3 surfaceNormal;
	vec3 position;
} vs_out;

uniform mat4 perspectiveMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;

void main() 
{ 
	mat4 VM = viewMatrix * modelMatrix;
	mat4 PVM = perspectiveMatrix * VM;
	
	gl_Position = PVM * vec4(position, 1.0); 
		
	vs_out.color = color; 
	vs_out.textureID = textureID;
	vs_out.uv = uv;
	vs_out.surfaceNormal =  (modelMatrix * vec4(surfaceNormal, 1.0)).xyz;
	vs_out.position = (modelMatrix * vec4(position, 1.0)).xyz;

}