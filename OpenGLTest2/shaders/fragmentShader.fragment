#version 330 core 
in vec4 ourColor;

in DATA {
	vec4 color; 
	vec2 uv;
	vec3 surfaceNormal;
	vec3 position;

} fs_in;

out vec4 color; 
uniform sampler2D ourTexture;

void main() 
{ 
	float La = 0.2; //ambient light source intensity
	float Ka = 1.0; //ambient reflectivity
	float Ld = 0.4; //diffuse light source intensity
	float Kd = 1.0; //diffuse reflectivity
	float Ls = 1.0; //specular light source intensity
	float Ks = 1.0; //Specular reflectivity
	float Shininess = 200; //Specular shininess faco

	vec3 lightPosition = 1000 * vec3(1.0f, 1.0f, 1.0f);
	vec3 n = normalize(fs_in.position);
	vec3 s = normalize(lightPosition - fs_in.position);
	vec3 v = normalize(fs_in.position);
	vec3 h = normalize(v + s); //halfway vector (used in specular calculation to improve performance)
	//vec3 r = reflect(s, fs_in.surfaceNormal);  //no longer needed if using h vector

	float ambient = La * Ka;

	float sDotN = max(dot(s, n), 0.0);
	float diffuse = Ld * Kd * sDotN;
	
	float spec = 0.0;
	if( sDotN > 0.0 )
		spec = Ls * Ks * pow( max( dot(h,n), 0.0 ), Shininess );

	float distance = length(lightPosition - fs_in.position);
	//color = ourColor;
	color =  (ambient + diffuse + spec) * texture(ourTexture, fs_in.uv) * fs_in.color;
}